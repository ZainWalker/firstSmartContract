// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18; // Stating our version

// contract simpleStorage {
//     //Basic types: boolean, uint, int, address, bytes
//     int256 hasFavoriteNumber = 0;
//     string favoriteNumberInText = "88";
//     bool favoriteNumber = true;
//     address myAddress = 0x30f813B419f9A4A2c646a64606AA1884a4F3652d;
//     bytes32 favByte = "cat";
// }

contract SimpleStorage {

    uint256 public myFavoriteNumber; // 0 if no value is given

    //uint256[] listOfFavoriteNumbers; // [34, 76, 34]

    struct Person {
        uint256 favoriteNumber;
        string name;
    }

    //Person public pat = Person({favoriteNumber: 7, name: "pat"});

    // dynamic array - if brackets has a number - static
    Person[] public listOfPeople;

    mapping(string => uint256) public nameToFavoriteNumber;

    function store(uint256 _favoriteNumber) public {
        myFavoriteNumber = _favoriteNumber;
    }

    // view - read state fromt the blockchain
    // pure - disallow update state, and reading state

    function retrieve() public view returns(uint256) {
        return myFavoriteNumber;
    }

    //calldata, memory, storage
    function addPerson(string memory _name, uint256 _favoriteNumber) public {
        listOfPeople.push(Person(_favoriteNumber, _name));
        nameToFavoriteNumber[_name] = _favoriteNumber;
    }
}

